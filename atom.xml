<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>China-ls</title>
  <subtitle>科技改变世界，世界改变我们，我们推动科技变革。呀，是个循环呀，能否使用Break?</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://china-ls.github.io/"/>
  <updated>2017-02-09T01:57:45.931Z</updated>
  <id>https://china-ls.github.io/</id>
  
  <author>
    <name>China-ls</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Angular 百度地图指令</title>
    <link href="https://china-ls.github.io/2017/01/19/angular-baidumap/"/>
    <id>https://china-ls.github.io/2017/01/19/angular-baidumap/</id>
    <published>2017-01-19T03:35:18.000Z</published>
    <updated>2017-02-09T01:57:45.931Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本文核心内容"><a href="#本文核心内容" class="headerlink" title="本文核心内容"></a>本文核心内容</h3><blockquote>
<p><strong>由于AngularJs并不主动去管理Baidu地图对象，所以我封装了一个AngularJs使用百度地图的指令，具体指令实现的内容如下：</strong></p>
<ul>
<li><font color="#f40">指令自动获取Baidu地图脚本</font></li>
<li><font color="#f40">绑定地图事件(<strong>地图点击、地图加载完成、地图拖动 等事件</strong>)</font></li>
<li><font color="#f40">注入百度地图引用到Controller中</font></li>
<li><font color="#f40">可配置绑定到当前scope的InfoWindow</font></li>
<li><font color="#f40">可在Controller中通过操作百度地图引用来添加标注等(<strong>这里的百度地图引用就是官方的JS对象，所以我们之间通过官方API操作即可。</strong>)</font>

</li>
</ul>
</blockquote>
<h3 id="GitHub地址"><a href="#GitHub地址" class="headerlink" title="GitHub地址"></a><a href="https://github.com/China-ls/angular-baidu-maps" target="_blank" rel="external">GitHub地址</a></h3><h3 id="Demo预览"><a href="#Demo预览" class="headerlink" title="Demo预览"></a>Demo预览</h3><p>在命令行中执行以下命令<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install</div><div class="line">bower install</div></pre></td></tr></table></figure></p>
<p>在浏览器中查看demo.html</p>
<h3 id="修改源码后编译"><a href="#修改源码后编译" class="headerlink" title="修改源码后编译"></a>修改源码后编译</h3><p>源码在src目录下angularjs-baidu-maps.js，可在修改源码后运行如下命令，在dist目录生成angularjs-baidu-maps.min.js<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grunt uglify</div></pre></td></tr></table></figure></p>
<h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>详细具体使用方式请参考 demo.html demo.js demo.css中内容</p>
<h3 id="js引入"><a href="#js引入" class="headerlink" title="js引入"></a>js引入</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bower_components/angular/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/angularjs-baidu-maps.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>js中对百度地图配置，通过一个对象mapOpts<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'app'</span>, [<span class="string">'ls.bmap'</span>])</div><div class="line">    .controller(<span class="string">'DemoCtrl'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line">        $scope.mapOpts = &#123;</div><div class="line">            <span class="attr">apiKey</span>: <span class="string">'替换成你的key'</span>,</div><div class="line">            <span class="attr">center</span>: &#123;<span class="attr">longitude</span>: <span class="number">121.595871</span>,<span class="attr">latitude</span>: <span class="number">31.187017</span>&#125;,</div><div class="line">            <span class="attr">zoom</span>: <span class="number">17</span>,</div><div class="line">            <span class="attr">enableScrollWheelZoom</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">enableMapClick</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">onMapLoadFild</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="comment">//百度地图加载失败</span></div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;]);</div></pre></td></tr></table></figure></p>
<p>说明：</p>
<ul>
<li>mapOpts 百度地图配置对象，名称与html中map-options=”mapOpts”一致</li>
<li>apiKey 百度地图控制台申请的key，<a href="http://lbsyun.baidu.com/apiconsole/key/create" target="_blank" rel="external">百度地图KEY申请</a></li>
<li>center 初始化地图中心点</li>
<li>zoom   初始化地图缩放级别</li>
<li>enableScrollWheelZoom   是否允许鼠标控制地图缩放</li>
<li>enableScrollWheelZoom   是否允许地图默认点击事件(true表示基本标注可以点击)</li>
<li>onMapLoadFild  当地图加载失败回调</li>
</ul>
<p>html模版中，配置如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">style</span>=<span class="string">"height:500px;"</span></span></div><div class="line">     <span class="attr">ui-baidu-map</span>=<span class="string">"myMap"</span></div><div class="line">     <span class="attr">map-event</span>=<span class="string">"&#123;'map-click': 'onMapClick($event, $params)', 'map-loaded': 'onMapLoaded($event, $params)'&#125;"</span></div><div class="line">     <span class="attr">map-options</span>=<span class="string">"mapOpts"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>说明：</p>
<ul>
<li>myMap是Controller中百度地图的引用，就是BMap.Map对象，我们可以使用百度地图提供的方法操作它。myMap可以换成任何值，这里只需要与上面controller中名称一致即可</li>
<li>map-event指令中是描述百度地图的各种事件(地图点击、地图加载完成等等，可以到官方去查<a href="http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a0b0" target="_blank" rel="external">地图参考</a>，配置方式相同，在事件前加’map-‘，参数都是($event,$params)，$event包含地图事件的信息，$params是这个事件的参数列表(数组)</li>
<li>map-options就是我们配置百度地图的对象名称，可以修改为任何值，与controller中保持一致</li>
</ul>
<h3 id="信息窗体配置"><a href="#信息窗体配置" class="headerlink" title="信息窗体配置"></a>信息窗体配置</h3><p>controller中配置信息窗体回调事件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'app'</span>, [<span class="string">'ls.bmap'</span>])</div><div class="line">    .controller(<span class="string">'DemoCtrl'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line">        <span class="comment">// ... 省略其他配置</span></div><div class="line">        $scope.onInfoWindowClick = <span class="function"><span class="keyword">function</span> (<span class="params">marker</span>) </span>&#123;</div><div class="line">            <span class="comment">// 信息窗体内部，按钮点击事件，与angularjs事件绑定方式相同</span></div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        $scope.onInfoWindowClickClose = <span class="function"><span class="keyword">function</span>(<span class="params">$event, $params</span>) </span>&#123;</div><div class="line">            <span class="comment">//点击信息窗体关闭按钮 回调，右上角百度地图关闭信息窗体点击时出发。</span></div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        $scope.onInfoWindowClose = <span class="function"><span class="keyword">function</span>(<span class="params">$event, $params</span>) </span>&#123;</div><div class="line">            <span class="comment">//信息窗体关闭 回调，信息窗体关闭时触发</span></div><div class="line">        &#125;;</div><div class="line">    &#125;]);</div></pre></td></tr></table></figure></p>
<p>html模版中<em>信息窗体</em>配置(示例)，实际使用中，只需要把需要当作信息窗体的html段落加上ui-baidu-map-info-window指令即可<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-baidu-map-info-window</span>=<span class="string">"myInfoWindow"</span></span></div><div class="line">     <span class="attr">info-window-event</span>=<span class="string">"&#123;'close' : 'onInfoWindowClose($event, $params)','clickclose' : 'onInfoWindowClickClose($event, $params)'&#125;"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"m-b-sm"</span>&gt;</span>标注<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">role</span>=<span class="string">"form"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"lat"</span>&gt;</span>Lat:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"lat"</span> <span class="attr">ng-model</span>=<span class="string">"currentMarker.point.lat"</span> <span class="attr">class</span>=<span class="string">"form-control input-sm w-sm m-l-lg"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"lng"</span>&gt;</span>Lng:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"lng"</span> <span class="attr">ng-model</span>=<span class="string">"currentMarker.point.lng"</span> <span class="attr">class</span>=<span class="string">"form-control input-sm w-sm m-l-lg"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-success btn-sm m-l-lg m-b-sm"</span> <span class="attr">ng-click</span>=<span class="string">"onInfoWindowClick(currentMarker)"</span>&gt;</span>点我试试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>说明：</p>
<ul>
<li>ui-baidu-map-info-window=”myInfoWindow”配置controller中操作InfoWindow的引用名称，可以替换为任何值</li>
<li>info-window-event配置方式与地图事件相同，不同之处在于这里不需要加前缀</li>
<li>ui-baidu-map-info-window指令所包含的所有内容都被当作InfoWindow的内容</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;本文核心内容&quot;&gt;&lt;a href=&quot;#本文核心内容&quot; class=&quot;headerlink&quot; title=&quot;本文核心内容&quot;&gt;&lt;/a&gt;本文核心内容&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;由于AngularJs并不主动去管理Baidu地图对象，所以我封装
    
    </summary>
    
      <category term="Angularjs" scheme="https://china-ls.github.io/categories/Angularjs/"/>
    
    
      <category term="Angularjs" scheme="https://china-ls.github.io/tags/Angularjs/"/>
    
      <category term="AngularjsDirective" scheme="https://china-ls.github.io/tags/AngularjsDirective/"/>
    
      <category term="百度地图" scheme="https://china-ls.github.io/tags/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>支付宝福卡增强卡</title>
    <link href="https://china-ls.github.io/2017/01/19/alipaycard2017/"/>
    <id>https://china-ls.github.io/2017/01/19/alipaycard2017/</id>
    <published>2017-01-19T01:49:09.000Z</published>
    <updated>2017-02-07T01:24:36.796Z</updated>
    
    <content type="html"><![CDATA[<h3 id="可口可乐"><a href="#可口可乐" class="headerlink" title="可口可乐"></a>可口可乐</h3><p>首先这个图片，扫描一次之后，先参与活动，然后分享，然后再次扫描，停留在扫描结果界面等待一会，出现一张福卡<br><img src="/assets/res/alipaycard/kkkl.jpg" alt="可口可乐"></p>
<h3 id="爱国福增强卡"><a href="#爱国福增强卡" class="headerlink" title="爱国福增强卡"></a>爱国福增强卡</h3><p><img src="/assets/res/alipaycard/ag.png" alt="爱国福增强卡"></p>
<h3 id="富强福增强卡"><a href="#富强福增强卡" class="headerlink" title="富强福增强卡"></a>富强福增强卡</h3><p><img src="/assets/res/alipaycard/fq.png" alt="富强福增强卡"></p>
<h3 id="和谐福增强卡"><a href="#和谐福增强卡" class="headerlink" title="和谐福增强卡"></a>和谐福增强卡</h3><p><img src="/assets/res/alipaycard/hx.png" alt="和谐福增强卡"></p>
<h3 id="敬业福增强卡"><a href="#敬业福增强卡" class="headerlink" title="敬业福增强卡"></a>敬业福增强卡</h3><p><img src="/assets/res/alipaycard/jy.png" alt="敬业福增强卡"></p>
<h3 id="友善福增强卡"><a href="#友善福增强卡" class="headerlink" title="友善福增强卡"></a>友善福增强卡</h3><p><img src="/assets/res/alipaycard/ys.png" alt="友善福增强卡"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;可口可乐&quot;&gt;&lt;a href=&quot;#可口可乐&quot; class=&quot;headerlink&quot; title=&quot;可口可乐&quot;&gt;&lt;/a&gt;可口可乐&lt;/h3&gt;&lt;p&gt;首先这个图片，扫描一次之后，先参与活动，然后分享，然后再次扫描，停留在扫描结果界面等待一会，出现一张福卡&lt;br&gt;&lt;img s
    
    </summary>
    
      <category term="支付宝福卡增强卡" scheme="https://china-ls.github.io/categories/%E6%94%AF%E4%BB%98%E5%AE%9D%E7%A6%8F%E5%8D%A1%E5%A2%9E%E5%BC%BA%E5%8D%A1/"/>
    
    
      <category term="支付宝福卡增强卡" scheme="https://china-ls.github.io/tags/%E6%94%AF%E4%BB%98%E5%AE%9D%E7%A6%8F%E5%8D%A1%E5%A2%9E%E5%BC%BA%E5%8D%A1/"/>
    
  </entry>
  
  <entry>
    <title>浅谈安卓MVP</title>
    <link href="https://china-ls.github.io/2017/01/08/droidmvp/"/>
    <id>https://china-ls.github.io/2017/01/08/droidmvp/</id>
    <published>2017-01-08T09:30:56.000Z</published>
    <updated>2017-02-07T01:24:36.797Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本文核心内容"><a href="#本文核心内容" class="headerlink" title="本文核心内容"></a>本文核心内容</h3><blockquote>
<p><strong>MVP主要目的和实现方式：</strong><br>&#160; &#160; &#160; &#160;<font color="#f40">把业务逻辑抽象成Presenter层接口，把对视图的操作抽象成View接口，Presenter通过操作View来实现对视图的操作，View通过操作Presenter来实现对Model的操作和逻辑调用。</font><br>&#160; &#160; &#160; &#160;<font color="#f40">实际操作中，以一个实体类实现Presenter接口，而Activity或者Fragment实现View接口，在Activity中实例化Presenter对象，并把自己传递给Presenter，然后互相调用，通过接口来代码解耦，并且可以针对接口进行单元测试。</font></p>
</blockquote>
<p><em>注：以上内容是本文核心内容，以下内容即是为了说明上面这段话，如果对MVP有一定了解的朋友，可以把省下时间去跟妹纸聊人生聊理想了。</em>(^_^)</p>
<h3 id="MVP-是个什么概念？"><a href="#MVP-是个什么概念？" class="headerlink" title="MVP 是个什么概念？"></a>MVP 是个什么概念？</h3><p>&#160; &#160; &#160; &#160;最近有朋友问我说：”MVP使用那种方式好？”，对于这样的问题，其实我也是被问懵了。因为笔者并不理解为什么会有这样的疑问，在进行了进一步的沟通后，原来他是被网上各种博客和谷歌的参考实现给弄糊涂了，因为实现方式上有一定的差异，导致他不知道该怎么选择自己写代码的方式了。<br>&#160; &#160; &#160; &#160;对于这样的情况，我不禁会去想一个问题，MVP是个什么样的概念，为什么会让他产生了不知道该选择那种实现方式去写代码的想法。<br>&#160; &#160; &#160; &#160;其实仔细思索一下不难发现，他的问题不仅仅是因为谷歌的官方参考和别的作者的写法上的差异，而是他其实并没有真正的理解<strong>MVP是个什么样的东西</strong>。<br>&#160; &#160; &#160; &#160;在具体讨论MVP是什么东西之前，我们先看下百度百科对于 “MVP 模式” 的<a href="http://baike.baidu.com/subview/7294/10754979.htm#viewPageContent" target="_blank" rel="external">定义</a>：</p>
<blockquote>
<p>&#160; &#160; &#160; &#160;mvp的全称为Model-View-Presenter，Model提供数据，View负责显示，Controller/Presenter负责逻辑的处理。MVP与MVC有着一个重大的区别：在MVP中View并不直接使用Model，它们之间的通信是通过Presenter (MVC中的Controller)来进行的，所有的交互都发生在Presenter内部，而在MVC中View会直接从Model中读取数据而不是通过 Controller。</p>
</blockquote>
<p>&#160; &#160; &#160; &#160;做过开发的同学应该对MVC的Model View Controller这些概念有一定的了解，这里就不再赘述了，那我们这里来说说MVP与MVC的不同，简单来说就是<strong>使用Presenter来进行View和Model间的通信</strong>。那么这里我们先抛开其他的问题，先记住上面加黑字体的这句话。<br>&#160; &#160; &#160; &#160;我们做移动应用开发从创建一个项目，到设计界面，然后写代码直至项目运行起来的过程中，基本上都是将视图设计这一块挪到了代码外部放到一个单独的布局文件中这就是我们要讲的View(<em>包含不仅限于此</em>)，而我们在与服务器端程序通信的过程中，传递的数据对象，这里就是Model，那么我们的controller呢？在不使用任何设计模式的情况下，我们的Activity对象就是进行着Controller的工作。具体实现方式请看下面的例子。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/textView"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeService</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doSomeThing</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> SomeService someService;</div><div class="line">    <span class="keyword">private</span> TextView mTextView;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.main);</div><div class="line">        someService = <span class="keyword">new</span> SomeService();</div><div class="line">        mTextView = (TextView) findViewById(R.id.textView);</div><div class="line">        mTextView.setText(someService.doSomeThing());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;到这里是不是很熟悉，基本上是我们使用IDE创建一个项目的时候自动生成的代码，但是又稍微有点不同的是，我们把需要设置到TextView上的内容，封装成了对象SomeService的一个方法，这样就更符合我们写项目时候的一些行为，因为我们在具体项目中，有些数据是从后台获取，然后展示到界面上。这个是基本mvc的使用方式，也就是安卓平台给我们提供的mvc。<br>&#160; &#160; &#160; &#160;接下来我们看下谷歌官方提供的<a href="https://github.com/googlesamples/android-architecture" target="_blank" rel="external">MVP参考实现</a>，官方实现中包含几种不同的版本(todo‑mvp|todo‑mvp‑rxjava|等等)，我们这里以最基本实现方式(不使用其他库的情况下实现)进行分析。在这里我们只讨论与MVP相关的内容。先上代码，等下解释，可以在看代码的同时，运行官方示例对照查看。<br><img src="/assets/res/20170108/mvp_google_code_structure.png" alt="谷歌MVP参考实现包结构"><br>&#160; &#160; &#160; &#160;简单说明下这些包的内容，data中是对实体类Model、获取Model的抽象层的封装与实现，与J2EE中DAO层的概念完全一致。谷歌这里是使用TasksDataSource将Task的CRUD等操作进行了一层抽象，TasksLocalDataSource提供了本地Sqlite的一个实现，TasksRemoteDataSource提供了一个内存LinkedHashMap的方式模拟服务器数据获取。通过TasksRepository持有TasksLocalDataSource和TasksRemoteDataSource，进行缓存控制，有兴趣的同学可以看下源码，具体奥妙之处还是真正看源码才能体会的到，这里就不展开讨论了。<br>&#160; &#160; &#160; &#160;util就是工具类的包，addedittask、statistics、taskdetail、tasks这些包，都是具体每个显示到用户面前界面的模块，每个包下面包含Activity、Fragment和具体Presenter的实现，这里针对tasks这个包下的内容来详细探讨，其他包中的内容大同小异，就不详细去讲了，具体可以看下源码。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这是 所有Presenter的基本接口</span></div><div class="line"><span class="keyword">package</span> com.example.android.architecture.blueprints.todoapp;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BasePresenter</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//这是 所有View的基本接口</span></div><div class="line"><span class="keyword">package</span> com.example.android.architecture.blueprints.todoapp;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseView</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">// 设置Presenter引用给View</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPresenter</span><span class="params">(T presenter)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//这是实体类对象，也就是我们说的Model</span></div><div class="line"><span class="keyword">package</span> com.example.android.architecture.blueprints.todoapp.data;</div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String mId;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String mTitle;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String mDescription;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> mCompleted;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">package</span> com.example.android.architecture.blueprints.todoapp.tasks;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TasksContract</span> </span>&#123;</div><div class="line">    <span class="comment">// 这里是TaskActivity针对视图操作的抽象接口</span></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">View</span> <span class="keyword">extends</span> <span class="title">BaseView</span>&lt;<span class="title">Presenter</span>&gt; </span>&#123;</div><div class="line">        <span class="comment">// 显示/隐藏 SwipeRefreshLayout 的刷新动画</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setLoadingIndicator</span><span class="params">(<span class="keyword">boolean</span> active)</span></span>;</div><div class="line">        <span class="comment">// 显示 给定的Task</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showTasks</span><span class="params">(List&lt;Task&gt; tasks)</span></span>;</div><div class="line">        <span class="comment">// 显示 添加Task 控件</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showAddTask</span><span class="params">()</span></span>;</div><div class="line">        <span class="comment">// 显示 Task详情UI</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showTaskDetailsUi</span><span class="params">(String taskId)</span></span>;</div><div class="line">        <span class="comment">// 标记Task已经完成</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showTaskMarkedComplete</span><span class="params">()</span></span>;</div><div class="line">        <span class="comment">//标记 Task 活跃</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showTaskMarkedActive</span><span class="params">()</span></span>;</div><div class="line">        <span class="comment">// 清除所有已经完成的Task</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showCompletedTasksCleared</span><span class="params">()</span></span>;</div><div class="line">        <span class="comment">// 显示 加载 Task 错误</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showLoadingTasksError</span><span class="params">()</span></span>;</div><div class="line">        <span class="comment">// 显示 未加载 到 Task</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showNoTasks</span><span class="params">()</span></span>;</div><div class="line">        <span class="comment">//显示 活跃的 过滤器 标签</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showActiveFilterLabel</span><span class="params">()</span></span>;</div><div class="line">        <span class="comment">//显示 已完成 过滤器 标签</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showCompletedFilterLabel</span><span class="params">()</span></span>;</div><div class="line">        <span class="comment">//显示 所有 过滤器 标签</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showAllFilterLabel</span><span class="params">()</span></span>;</div><div class="line">        <span class="comment">//显示 无活跃的Task</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showNoActiveTasks</span><span class="params">()</span></span>;</div><div class="line">        <span class="comment">//显示 无已完成Task</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showNoCompletedTasks</span><span class="params">()</span></span>;</div><div class="line">        <span class="comment">// 显示保存成功信息</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showSuccessfullySavedMessage</span><span class="params">()</span></span>;</div><div class="line">        <span class="comment">//当前 Fragment的 active状态</span></div><div class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">isActive</span><span class="params">()</span></span>;</div><div class="line">        <span class="comment">// 显示 过滤器 PopupMenu</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showFilteringPopUpMenu</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 这里是TaskActivity针对Model操作的抽象接口</span></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Presenter</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span> </span>&#123;</div><div class="line">        <span class="comment">// Activity Result 回调方法</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">result</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode)</span></span>;</div><div class="line">        <span class="comment">// 加载Task</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">loadTasks</span><span class="params">(<span class="keyword">boolean</span> forceUpdate)</span></span>;</div><div class="line">        <span class="comment">// 添加Task</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">addNewTask</span><span class="params">()</span></span>;</div><div class="line">        <span class="comment">// 显示Task详情</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">openTaskDetails</span><span class="params">(Task requestedTask)</span></span>;</div><div class="line">        <span class="comment">// 将Task设置为完成状态</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">completeTask</span><span class="params">(Task completedTask)</span></span>;</div><div class="line">        <span class="comment">// 将Task设置为活跃状态</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">activateTask</span><span class="params">(Task activeTask)</span></span>;</div><div class="line">        <span class="comment">// 清空所有已经完成的Task</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">clearCompletedTasks</span><span class="params">()</span></span>;</div><div class="line">        <span class="comment">//设置当前过滤器类型</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setFiltering</span><span class="params">(TasksFilterType requestType)</span></span>;</div><div class="line">        <span class="comment">//获取当前过滤器类型</span></div><div class="line">        <span class="function">TasksFilterType <span class="title">getFiltering</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;其实看到这里同学们应该发现了，我们先抛开所有的MVP等等概念，仅看这几个类的方法和名称，我们会发现几个特点：</p>
<ul>
<li>TasksContract.View 接口中封装的都是对视图(VIEW)的操作方法</li>
<li>TasksContract.Presenter 接口中封装的都是对Model和逻辑的操作方法</li>
<li>BaseView中封装了setPresenter方法，使VIEW获取Presenter引用<br><span id="a1"></span></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//TasksActivity </span></div><div class="line"><span class="keyword">package</span> com.example.android.architecture.blueprints.todoapp.tasks;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TasksActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="comment">// 具体Task界面使用到的Presenter</span></div><div class="line">    <span class="comment">// ① 同时请大家思考下，为什么这里使用的是TasksPresenter对象，而不是BaseView接口</span></div><div class="line">    <span class="keyword">private</span> TasksPresenter mTasksPresenter;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.tasks_act);</div><div class="line">        <span class="comment">// Set up the toolbar.</span></div><div class="line">        <span class="comment">//略过代码中的视图设置</span></div><div class="line">        <span class="comment">// Set up the navigation drawer.</span></div><div class="line"></div><div class="line">        <span class="comment">// 从布局获取 Fragment，并强转为TasksFragment</span></div><div class="line">        TasksFragment tasksFragment = </div><div class="line">            (TasksFragment) getSupportFragmentManager()</div><div class="line">            .findFragmentById(R.id.contentFrame);</div><div class="line">        <span class="keyword">if</span> (tasksFragment == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 创建TasksFragment</span></div><div class="line">            tasksFragment = TasksFragment.newInstance();</div><div class="line">            <span class="comment">//吧TasksFragment 添加到当前的界面上</span></div><div class="line">            ActivityUtils.addFragmentToActivity(</div><div class="line">                    getSupportFragmentManager(), tasksFragment, </div><div class="line">                    R.id.contentFrame);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 创建 presenter</span></div><div class="line">        mTasksPresenter = <span class="keyword">new</span> TasksPresenter(</div><div class="line">                <span class="comment">// 这里就是刚才说到的Task的CRUD封装对象</span></div><div class="line">                Injection.provideTasksRepository(getApplicationContext()), </div><div class="line">                tasksFragment);</div><div class="line"></div><div class="line">        <span class="comment">// Load previously saved state, if available.</span></div><div class="line">        <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>) &#123;</div><div class="line">            TasksFilterType currentFiltering = </div><div class="line">                (TasksFilterType) savedInstanceState</div><div class="line">                .getSerializable(CURRENT_FILTERING_KEY);</div><div class="line">            <span class="comment">// 这里是调用了 TasksPresenter 的设置 过滤器 方法</span></div><div class="line">            mTasksPresenter.setFiltering(currentFiltering);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;TasksActivity 做的事情比较简单：</p>
<ul>
<li>创建视图</li>
<li>创建 TasksFragment，TasksFragment实现TasksContract.View接口</li>
<li>实例化 TasksPresenter ，TasksPresenter实现TasksContract.Presenter接口</li>
<li>调用 TasksPresenter 的 setFiltering方法，这是目前看到一次对Presenter的使用<br><span id="a2"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.android.architecture.blueprints.todoapp.tasks;</div><div class="line"><span class="comment">// 实现了TasksContract.View 接口的对象，在这里可以看到具体对Presenter的操作</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TasksFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span> <span class="title">TasksContract</span>.<span class="title">View</span> </span>&#123;</div><div class="line">    <span class="comment">// ② 请大家思考下，这里为什么使用的是 TasksContract.Presenter 而不是 TasksPresenter？</span></div><div class="line">    <span class="keyword">private</span> TasksContract.Presenter mPresenter;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">        <span class="comment">// 调用 TasksPresenter的start方法   1</span></div><div class="line">        mPresenter.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPresenter</span><span class="params">(@NonNull TasksContract.Presenter presenter)</span> </span>&#123;</div><div class="line">        <span class="comment">// 设置 TasksPresenter对象   2</span></div><div class="line">        mPresenter = checkNotNull(presenter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">        <span class="comment">// 调用 TasksPresenter的result方法   3</span></div><div class="line">        mPresenter.result(requestCode, resultCode);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class="line">                             Bundle savedInstanceState) &#123;</div><div class="line">        <span class="comment">// 省略具体创建 UI 视图的过程</span></div><div class="line"></div><div class="line">        <span class="comment">// Set up floating action button</span></div><div class="line">        FloatingActionButton fab =</div><div class="line">                (FloatingActionButton) getActivity().findViewById(R.id.fab_add_task);</div><div class="line"></div><div class="line">        fab.setImageResource(R.drawable.ic_add);</div><div class="line">        fab.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                <span class="comment">// 调用 TasksPresenter的addNewTask方法   4</span></div><div class="line">                mPresenter.addNewTask();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        swipeRefreshLayout.setOnRefreshListener(<span class="keyword">new</span> SwipeRefreshLayout.OnRefreshListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="comment">// 调用 TasksPresenter的 loadTasks 方法   5</span></div><div class="line">                mPresenter.loadTasks(<span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (item.getItemId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.menu_clear:</div><div class="line">                <span class="comment">// 调用 TasksPresenter的 clearCompletedTasks 方法   6</span></div><div class="line">                mPresenter.clearCompletedTasks();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.menu_filter:</div><div class="line">                showFilteringPopUpMenu();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.menu_refresh:</div><div class="line">                <span class="comment">// 调用 TasksPresenter的 loadTasks 方法   7</span></div><div class="line">                mPresenter.loadTasks(<span class="keyword">true</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showFilteringPopUpMenu</span><span class="params">()</span> </span>&#123;</div><div class="line">        PopupMenu popup = <span class="keyword">new</span> PopupMenu(getContext(), getActivity().findViewById(R.id.menu_filter));</div><div class="line">        popup.getMenuInflater().inflate(R.menu.filter_tasks, popup.getMenu());</div><div class="line"></div><div class="line">        popup.setOnMenuItemClickListener(<span class="keyword">new</span> PopupMenu.OnMenuItemClickListener() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMenuItemClick</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">                <span class="keyword">switch</span> (item.getItemId()) &#123;</div><div class="line">                    <span class="keyword">case</span> R.id.active:</div><div class="line">                        <span class="comment">// 调用 TasksPresenter的 loadTasks 方法   8</span></div><div class="line">                        mPresenter.setFiltering(TasksFilterType.ACTIVE_TASKS);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> R.id.completed:</div><div class="line">                        <span class="comment">// 调用 TasksPresenter的 loadTasks 方法   9</span></div><div class="line">                        mPresenter.setFiltering(TasksFilterType.COMPLETED_TASKS);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">default</span>:</div><div class="line">                        <span class="comment">// 调用 TasksPresenter的 loadTasks 方法   10</span></div><div class="line">                        mPresenter.setFiltering(TasksFilterType.ALL_TASKS);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 调用 TasksPresenter的 loadTasks 方法   11</span></div><div class="line">                mPresenter.loadTasks(<span class="keyword">false</span>);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        popup.show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Listener for clicks on tasks in the ListView.</div><div class="line">     */</div><div class="line">    TaskItemListener mItemListener = <span class="keyword">new</span> TaskItemListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTaskClick</span><span class="params">(Task clickedTask)</span> </span>&#123;</div><div class="line">            <span class="comment">// 调用 TasksPresenter的 loadTasks 方法   12</span></div><div class="line">            mPresenter.openTaskDetails(clickedTask);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleteTaskClick</span><span class="params">(Task completedTask)</span> </span>&#123;</div><div class="line">            <span class="comment">// 调用 TasksPresenter的 loadTasks 方法   13</span></div><div class="line">            mPresenter.completeTask(completedTask);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivateTaskClick</span><span class="params">(Task activatedTask)</span> </span>&#123;</div><div class="line">            <span class="comment">// 调用 TasksPresenter的 loadTasks 方法   14</span></div><div class="line">            mPresenter.activateTask(activatedTask);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>&#160; &#160; &#160; &#160;上面是 TasksFragment 一部分相关内容，我们简单看下就可以发现：</p>
<ul>
<li>生成基本视图</li>
<li>对 TasksPresenter 的调用相对比较多</li>
<li>把 TasksPresenter 当(就)作(是)一个普通对象来操作<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.android.architecture.blueprints.todoapp.tasks;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TasksPresenter</span> <span class="keyword">implements</span> <span class="title">TasksContract</span>.<span class="title">Presenter</span> </span>&#123;</div><div class="line">    <span class="comment">// 数据CRUD 操作</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TasksRepository mTasksRepository;</div><div class="line">    <span class="comment">// View 对象</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TasksContract.View mTasksView;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TasksPresenter</span><span class="params">(@NonNull TasksRepository tasksRepository, @NonNull TasksContract.View tasksView)</span> </span>&#123;</div><div class="line">        mTasksRepository = checkNotNull(tasksRepository, <span class="string">"tasksRepository cannot be null"</span>);</div><div class="line">        <span class="comment">// 保存View的引用</span></div><div class="line">        mTasksView = checkNotNull(tasksView, <span class="string">"tasksView cannot be null!"</span>);</div><div class="line">        <span class="comment">// 把自己的引用设置给View</span></div><div class="line">        mTasksView.setPresenter(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">result</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode)</span> </span>&#123;</div><div class="line">        <span class="comment">// If a task was successfully added, show snackbar</span></div><div class="line">        <span class="keyword">if</span> (AddEditTaskActivity.REQUEST_ADD_TASK == requestCode &amp;&amp; Activity.RESULT_OK == resultCode) &#123;</div><div class="line">            <span class="comment">// 操作View</span></div><div class="line">            mTasksView.showSuccessfullySavedMessage();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadTasks</span><span class="params">(<span class="keyword">boolean</span> forceUpdate, <span class="keyword">final</span> <span class="keyword">boolean</span> showLoadingUI)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (showLoadingUI) &#123;</div><div class="line">            <span class="comment">// 操作View</span></div><div class="line">            mTasksView.setLoadingIndicator(<span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// ... 省略其他无关代码</span></div><div class="line">        mTasksRepository.getTasks(<span class="keyword">new</span> TasksDataSource.LoadTasksCallback() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTasksLoaded</span><span class="params">(List&lt;Task&gt; tasks)</span> </span>&#123;</div><div class="line">                <span class="comment">// ... 省略其他无关代码</span></div><div class="line">                <span class="keyword">if</span> (showLoadingUI) &#123;</div><div class="line">                    <span class="comment">// 操作View</span></div><div class="line">                    mTasksView.setLoadingIndicator(<span class="keyword">false</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// ... 省略其他无关代码</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDataNotAvailable</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="comment">// The view may not be able to handle UI updates anymore</span></div><div class="line">                <span class="comment">// 操作View</span></div><div class="line">                <span class="keyword">if</span> (!mTasksView.isActive()) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 操作View</span></div><div class="line">                mTasksView.showLoadingTasksError();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processTasks</span><span class="params">(List&lt;Task&gt; tasks)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (tasks.isEmpty()) &#123;</div><div class="line">            <span class="comment">// Show a message indicating there are no tasks for that filter type.</span></div><div class="line">            processEmptyTasks();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 操作View</span></div><div class="line">            mTasksView.showTasks(tasks);</div><div class="line">            <span class="comment">// Set the filter label's text.</span></div><div class="line">            showFilterLabel();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showFilterLabel</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (mCurrentFiltering) &#123;</div><div class="line">            <span class="keyword">case</span> ACTIVE_TASKS:</div><div class="line">                <span class="comment">// 操作View</span></div><div class="line">                mTasksView.showActiveFilterLabel();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> COMPLETED_TASKS:</div><div class="line">                <span class="comment">// 操作View</span></div><div class="line">                mTasksView.showCompletedFilterLabel();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="comment">// 操作View</span></div><div class="line">                mTasksView.showAllFilterLabel();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processEmptyTasks</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (mCurrentFiltering) &#123;</div><div class="line">            <span class="keyword">case</span> ACTIVE_TASKS:</div><div class="line">                <span class="comment">// 操作View</span></div><div class="line">                mTasksView.showNoActiveTasks();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> COMPLETED_TASKS:</div><div class="line">                <span class="comment">// 操作View</span></div><div class="line">                mTasksView.showNoCompletedTasks();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="comment">// 操作View</span></div><div class="line">                mTasksView.showNoTasks();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNewTask</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 操作View</span></div><div class="line">        mTasksView.showAddTask();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openTaskDetails</span><span class="params">(@NonNull Task requestedTask)</span> </span>&#123;</div><div class="line">        checkNotNull(requestedTask, <span class="string">"requestedTask cannot be null!"</span>);</div><div class="line">        <span class="comment">// 操作View</span></div><div class="line">        mTasksView.showTaskDetailsUi(requestedTask.getId());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completeTask</span><span class="params">(@NonNull Task completedTask)</span> </span>&#123;</div><div class="line">        checkNotNull(completedTask, <span class="string">"completedTask cannot be null!"</span>);</div><div class="line">        mTasksRepository.completeTask(completedTask);</div><div class="line">        <span class="comment">// 操作View</span></div><div class="line">        mTasksView.showTaskMarkedComplete();</div><div class="line">        loadTasks(<span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">activateTask</span><span class="params">(@NonNull Task activeTask)</span> </span>&#123;</div><div class="line">        checkNotNull(activeTask, <span class="string">"activeTask cannot be null!"</span>);</div><div class="line">        mTasksRepository.activateTask(activeTask);</div><div class="line">        <span class="comment">// 操作View</span></div><div class="line">        mTasksView.showTaskMarkedActive();</div><div class="line">        loadTasks(<span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearCompletedTasks</span><span class="params">()</span> </span>&#123;</div><div class="line">        mTasksRepository.clearCompletedTasks();</div><div class="line">        <span class="comment">// 操作View</span></div><div class="line">        mTasksView.showCompletedTasksCleared();</div><div class="line">        loadTasks(<span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>上面是 TasksPresenter 的部分相关内容，我们简单看下就可以发现：</p>
<ul>
<li>内部保留了TasksContract.View的引用，用来操作视图</li>
<li>对视图的操作，都是直接调用View的引用</li>
<li>操作视图时候，并不考虑在哪个线程中操作(<strong>这里就是比较重要的，那么我们后台线程如果操作UI线程怎么办呢？实际上，这里并不需要后台线程去考虑这个问题，因为真正去操作UI的还是View，所以应该由View去控制</strong>)</li>
</ul>
<h3 id="强化对于MVP的理解"><a href="#强化对于MVP的理解" class="headerlink" title="强化对于MVP的理解"></a>强化对于MVP的理解</h3><p>&#160; &#160; &#160; &#160;其实，MVP总体来说就是这个思想，毕竟MVP是个模式，你如何使用是具体的实现方式。我们再来强化下对于MVP的理解：</p>
<ul>
<li>MVP是个模式，并不是某个具体实现，其本质是面向接口编程</li>
<li>业务逻辑方法抽象成接口Presenter</li>
<li>视图操作方法抽象成接口View</li>
<li>View和Presenter互相保存引用，在View中通过调用Presenter方法操作业务逻辑，在Presenter中调用View方法操作视图</li>
</ul>
<h3 id="对于①②解释："><a href="#对于①②解释：" class="headerlink" title="对于①②解释："></a><font color="#f40">对于①②解释：</font></h3><ul>
<li>对于<a href="#a1">①</a>，这里是把TasksContract.Presenter进行实例化的地方，其实是已经很明确知道需要使用到的Presenter对象的类型了，所以直接使用实体类就可以了。因为当你切换到不同的Presenter时候，依然是需要修改这里的代码的。</li>
<li>对于<a href="#a2">②</a>，这里是视图对逻辑引用的保存，但是这里其实是并不清楚具体逻辑的实现，针对接口编程当然最好啦，当你替换下不同的实现，并不需要修改这里的代码。        </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;本文核心内容&quot;&gt;&lt;a href=&quot;#本文核心内容&quot; class=&quot;headerlink&quot; title=&quot;本文核心内容&quot;&gt;&lt;/a&gt;本文核心内容&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;MVP主要目的和实现方式：&lt;/strong&gt;&lt;br&gt;&amp;#160; 
    
    </summary>
    
      <category term="理论" scheme="https://china-ls.github.io/categories/%E7%90%86%E8%AE%BA/"/>
    
    
      <category term="安卓" scheme="https://china-ls.github.io/tags/%E5%AE%89%E5%8D%93/"/>
    
      <category term="MVP" scheme="https://china-ls.github.io/tags/MVP/"/>
    
  </entry>
  
</feed>
